name: Build Image
on:
    push:
        branches:
            - main
        paths:
            - 'image-versions.yaml'
    pull_request:
        branches:
            - main
    workflow_dispatch:

env:
    IMAGE_NAME: '${{ github.event.repository.name }}'
    IMAGE_DESC: 'My Customized Bluefin Image'
    IMAGE_VENDOR: ${{ github.repository_owner }}
    IMAGE_REGISTRY: 'ghcr.io/${{ github.repository_owner }}'
    DEFAULT_TAG: 'latest'

concurrency:
    group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.brand_name}}-${{ inputs.stream_name }}
    cancel-in-progress: true

jobs:
    build_push:
        name: Build and Push Image
        runs-on: ubuntu-24.04

        permissions:
            contents: read
            packages: write
            id-token: write

        outputs:
            build_date: ${{ steps.date.outputs.build_date }}
            version: ${{ steps.generate_tags.outputs.version }}

        steps:
            - name: Checkout
              uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

            # This is optional, but if you see that your builds are way too big for the runners, you can enable this by uncommenting the following lines:
            - name: Maximize Build Space
              uses: ublue-os/remove-unwanted-software@cc0becac701cf642c8f0a6613bbdaf5dc36b259e # v9
              with:
                  remove-codeql: true

            - name: Fetch Upstream Versions
              id: fetch
              shell: bash
              run: |
                  skopeo inspect docker://ghcr.io/ublue-os/bluefin-dx:stable > inspect.json

                  image=$(jq -r '.["Labels"]["org.opencontainers.image.version"]' inspect.json)
                  if [ -z "$image" ] || [ "null" = "$image" ]; then
                      echo "Inspected image version must not be empty or null"
                      exit 1
                  fi

                  fedora=$(echo "$image" | cut -f1 -d.)
                  if [ -z "$fedora" ] || [ "null" = "$fedora" ]; then
                      echo "Fedora version must not be empty or null"
                      exit 1
                  fi

                  echo "fedora_version=$fedora" >> $GITHUB_OUTPUT

            - name: Get Current Date
              id: date
              shell: bash
              run: |
                  echo "build_date=$(date -u +%Y\-%m\-%d\T%H\:%M\:%S\Z)" >> $GITHUB_OUTPUT
                  echo "tag_date=$(date -u +%Y%m%d)" >> $GITHUB_OUTPUT

            # Generate tags and suffix it by .1, .2, etc if the same
            - name: Generate Tags
              id: generate_tags
              shell: bash
              run: |
                  version=${{ steps.fetch.outputs.fedora_version }}.${{ steps.date.outputs.tag_date }}

                  tags=$(gh api repos/${{ github.repository }}/releases --jq '[.[].tag_name | select(startswith("'"${version}"'"))] | sort_by(.)')

                  if [ -z "$tags" ] || [ "$tags" == "[]" ]; then
                      echo "version=${version}" >> $GITHUB_OUTPUT
                  else
                      latest=$(echo "$tags" | jq -r '.[-1]')
                      
                      if [[ $latest == $version ]]; then
                          echo "version=${version}.1" >> $GITHUB_OUTPUT
                      else
                          num=$(echo $latest | awk -F. '{print $3}')
                          next=$((num + 1))
                          echo "version=${version}.${next}" >> $GITHUB_OUTPUT
                      fi
                  fi
              env:
                  GITHUB_TOKEN: ${{ github.token }}

            - name: Query Image Digest
              id: query_digest
              env:
                  IMAGE_VERSIONS_FILE: ./image-versions.yaml
              shell: bash
              run: |
                  BASE_IMAGE_DIGEST=$(yq -r ".images[] | select(.name == \"${{ env.IMAGE_NAME }}\") | .digest" "$IMAGE_VERSIONS_FILE")
                  if [ -z "$BASE_IMAGE_DIGEST" ]; then
                      echo "BASE_IMAGE_DIGEST not found in image-versions.yaml"
                      exit 1
                  fi

                  echo "BASE_IMAGE_DIGEST=${BASE_IMAGE_DIGEST}" >> $GITHUB_OUTPUT

            - name: Image Metadata
              uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5
              id: metadata
              with:
                  # This generates all the tags for your image, you can add custom tags here too!
                  tags: |
                      type=raw,value=latest
                      type=raw,value=${{ steps.generate_tags.outputs.version }}
                      type=sha,enable=${{ github.event_name == 'pull_request' }}
                      type=ref,event=pr
                  labels: |
                      org.opencontainers.image.created=${{ steps.date.outputs.build_date }}
                      org.opencontainers.image.description=${{ env.IMAGE_DESC }}
                      org.opencontainers.image.documentation=https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/refs/heads/main/README.md
                      org.opencontainers.image.source=https://github.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/blob/main/Containerfile
                      org.opencontainers.image.title=${{ env.IMAGE_NAME }}
                      org.opencontainers.image.url=https://github.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
                      org.opencontainers.image.vendor=${{ github.repository_owner }}
                      org.opencontainers.image.version=${{ steps.generate_tags.outputs.version }}
                      containers.bootc=1
                  sep-tags: ' '
                  sep-annotations: ' '

            # Generate a file with all the build-args passed to buildah
            - name: Prepare Build Args File
              shell: bash
              run: |
                  cat <<'EOF' >>build_args.txt
                  IMAGE_NAME=${{ env.IMAGE_NAME }}
                  IMAGE_VENDOR=${{ env.IMAGE_VENDOR }}
                  BASE_IMAGE_DIGEST=${{ steps.query_digest.outputs.BASE_IMAGE_DIGEST }}
                  EOF

            # Build image using buildah and save it to raw-img for rechunk
            - name: Build Image
              id: build_image
              shell: bash
              run: |
                  sudo buildah build \
                      --build-arg-file build_args.txt \
                      --file "./Containerfile" \
                      --format "docker" \
                      --tag raw-img .

            # Rechunk is a script that we use on Universal Blue to make sure there isnt a single huge layer when your image gets published.
            # This does not make your image faster to download, just provides better resumability and fixes a few errors.
            # Documentation for Rechunk is provided on their github repository at https://github.com/hhd-dev/rechunk
            # You can enable it by uncommenting the following lines:
            - name: Run Rechunker
              id: rechunk
              uses: hhd-dev/rechunk@ca77507401f8700bb0b25ebecbbf980a078cd180 # v1.2.2
              if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
              with:
                  rechunk: 'ghcr.io/hhd-dev/rechunk:v1.1.2'
                  ref: 'raw-img'
                  prev-ref: '${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DEFAULT_TAG }}'
                  skip_compression: true
                  version: ${{ steps.generate_tags.outputs.version }}
                  labels: ${{ steps.metadata.outputs.labels }} # Rechunk strips out all the labels during build, this needs to be reapplied here with newline separator

            # This is necessary so that the podman socket can find the rechunked image on its storage
            - name: Load in Podman and Tag
              if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
              shell: bash
              run: |
                  IMAGE=$(podman pull ${{ steps.rechunk.outputs.ref }})
                  sudo rm -rf ${{ steps.rechunk.outputs.output }}
                  for tag in ${{ steps.metadata.outputs.tags }}; do
                    podman tag $IMAGE ${{ env.IMAGE_NAME }}:$tag
                  done

            # These `if` statements are so that pull requests for your custom images do not make it publish any packages under your name without you knowing
            # They also check if the runner is on the default branch so that things like the merge queue (if you enable it), are going to work
            - name: Login to GitHub Container Registry
              uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
              if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
            # https://github.com/macbre/push-to-ghcr/issues/12
            - name: Lowercase Registry
              id: registry_case
              uses: ASzc/change-string-case-action@d0603cd0a7dd490be678164909f65c7737470a7f # v6
              if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
              with:
                  string: ${{ env.IMAGE_REGISTRY }}

            - name: Lowercase Image
              id: image_case
              uses: ASzc/change-string-case-action@d0603cd0a7dd490be678164909f65c7737470a7f # v6
              if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
              with:
                  string: ${{ env.IMAGE_NAME }}

            - name: Push to GHCR
              uses: redhat-actions/push-to-registry@5ed88d269cf581ea9ef6dd6806d01562096bee9c # v2
              if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
              id: push
              env:
                  REGISTRY_USER: ${{ github.actor }}
                  REGISTRY_PASSWORD: ${{ github.token }}
              with:
                  registry: ${{ steps.registry_case.outputs.lowercase }}
                  image: ${{ steps.image_case.outputs.lowercase }}
                  tags: ${{ steps.metadata.outputs.tags }}
                  username: ${{ env.REGISTRY_USER }}
                  password: ${{ env.REGISTRY_PASSWORD }}

            # This section is optional and only needs to be enabled if you plan on distributing
            # your project for others to consume. You will need to create a public and private key
            # using Cosign and save the private key as a repository secret in Github for this workflow
            # to consume. For more details, review the image signing section of the README.
            - name: Install Cosign
              uses: sigstore/cosign-installer@3454372f43399081ed03b604cb2d021dabca52bb # v3.8.2
              if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)

            - name: Sign Container Image
              if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
              shell: bash
              run: |
                  IMAGE_FULL="${{ steps.registry_case.outputs.lowercase }}/${{ steps.image_case.outputs.lowercase }}"
                  for tag in ${{ steps.metadata.outputs.tags }}; do
                    cosign sign -y --key env://COSIGN_PRIVATE_KEY $IMAGE_FULL:$tag
                  done
              env:
                  TAGS: ${{ steps.push.outputs.digest }}
                  COSIGN_EXPERIMENTAL: false
                  COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

    generate_release:
        name: Generate Release
        needs: [build_push]
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        uses: ./.github/workflows/generate-release.yml
        secrets: inherit
        with:
            build_date: ${{ needs.build_push.outputs.build_date }}
            version: ${{ needs.build_push.outputs.version }}

        permissions:
            contents: write
