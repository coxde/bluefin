name: CI
on:
    push:
        branches:
            - "renovate/**"

env:
    IMAGE_NAME: "${{ github.event.repository.name }}"
    IMAGE_DESC: "My Customized Bluefin Image"
    IMAGE_VENDOR: ${{ github.repository_owner }}
    IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"
    DEFAULT_TAG: "latest"

concurrency:
    group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.brand_name}}-${{ inputs.stream_name }}
    cancel-in-progress: true

jobs:
    build_push:
        name: Build and Push Image
        runs-on: ubuntu-24.04

        permissions:
            contents: read
            packages: write
            id-token: write

        outputs:
            build_date: ${{ steps.date.outputs.build_date }}
            version: ${{ steps.generate_tags.outputs.version }}

        steps:
            - name: Checkout
              uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

            # This is optional, but if you see that your builds are way too big for the runners, you can enable this by uncommenting the following lines:
            - name: Maximize Build Space
              uses: ublue-os/remove-unwanted-software@cc0becac701cf642c8f0a6613bbdaf5dc36b259e # v9
              with:
                  remove-codeql: true

            - name: Fetch Upstream Versions
              id: fetch
              shell: bash
              run: |
                  skopeo inspect docker://ghcr.io/ublue-os/bluefin-dx:stable > inspect.json

                  image=$(jq -r '.["Labels"]["org.opencontainers.image.version"]' inspect.json)
                  if [ -z "$image" ] || [ "null" = "$image" ]; then
                      echo "Inspected image version must not be empty or null"
                      exit 1
                  fi

                  fedora=$(echo "$image" | cut -f1 -d.)
                  if [ -z "$fedora" ] || [ "null" = "$fedora" ]; then
                      echo "Fedora version must not be empty or null"
                      exit 1
                  fi

                  echo "fedora_version=$fedora" >> $GITHUB_OUTPUT

            - name: Get Current Date
              id: date
              shell: bash
              run: |
                  echo "build_date=$(date -u +%Y\-%m\-%d\T%H\:%M\:%S\Z)" >> $GITHUB_OUTPUT
                  echo "tag_date=$(date -u +%Y%m%d)" >> $GITHUB_OUTPUT

            # Generate tags and suffix it by .1, .2, etc if the same
            - name: Generate Tags
              id: generate_tags
              shell: bash
              run: |
                  version=${{ steps.fetch.outputs.fedora_version }}.${{ steps.date.outputs.tag_date }}

                  tags=$(gh api repos/${{ github.repository }}/releases --jq '[.[].tag_name | select(startswith("'"${version}"'"))] | sort_by(.)')

                  if [ -z "$tags" ] || [ "$tags" == "[]" ]; then
                      echo "version=${version}" >> $GITHUB_OUTPUT
                  else
                      latest=$(echo "$tags" | jq -r '.[-1]')

                      if [[ $latest == $version ]]; then
                          echo "version=${version}.1" >> $GITHUB_OUTPUT
                      else
                          num=$(echo $latest | awk -F. '{print $3}')
                          next=$((num + 1))
                          echo "version=${version}.${next}" >> $GITHUB_OUTPUT
                      fi
                  fi
              env:
                  GITHUB_TOKEN: ${{ github.token }}

            - name: Query Image Digest
              id: query_digest
              env:
                  IMAGE_VERSIONS_FILE: ./image-versions.yaml
              shell: bash
              run: |
                  BASE_IMAGE_DIGEST=$(yq -r ".images[] | select(.name == \"${{ env.IMAGE_NAME }}\") | .digest" "$IMAGE_VERSIONS_FILE")
                  if [ -z "$BASE_IMAGE_DIGEST" ]; then
                      echo "BASE_IMAGE_DIGEST not found in image-versions.yaml"
                      exit 1
                  fi

                  echo "BASE_IMAGE_DIGEST=${BASE_IMAGE_DIGEST}" >> $GITHUB_OUTPUT

            - name: Image Metadata
              uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
              id: metadata
              with:
                  # This generates all the tags for your image, you can add custom tags here too!
                  tags: |
                      type=raw,value=latest
                      type=raw,value=${{ steps.generate_tags.outputs.version }}
                      type=sha,enable=${{ github.event_name == 'pull_request' }}
                      type=ref,event=pr
                  labels: |
                      org.opencontainers.image.created=${{ steps.date.outputs.build_date }}
                      org.opencontainers.image.description=${{ env.IMAGE_DESC }}
                      org.opencontainers.image.documentation=https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/refs/heads/main/README.md
                      org.opencontainers.image.source=https://github.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/blob/main/Containerfile
                      org.opencontainers.image.title=${{ env.IMAGE_NAME }}
                      org.opencontainers.image.url=https://github.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
                      org.opencontainers.image.vendor=${{ github.repository_owner }}
                      org.opencontainers.image.version=${{ steps.generate_tags.outputs.version }}
                      containers.bootc=1
                  sep-tags: " "
                  sep-annotations: " "

            # Generate a file with all the build-args passed to buildah
            - name: Prepare Build Args File
              shell: bash
              run: |
                  cat <<'EOF' >>build_args.txt
                  IMAGE_NAME=${{ env.IMAGE_NAME }}
                  IMAGE_VENDOR=${{ env.IMAGE_VENDOR }}
                  IMAGE_TAG=${{ env.DEFAULT_TAG }}
                  BASE_IMAGE_DIGEST=${{ steps.query_digest.outputs.BASE_IMAGE_DIGEST }}
                  EOF

            # Build image using buildah and save it to raw-img for rechunk
            - name: Build Image
              id: build_image
              shell: bash
              run: |
                  sudo buildah build \
                      --build-arg-file build_args.txt \
                      --file "./Containerfile" \
                      --format "docker" \
                      --tag raw-img .
